# The MIT License
#
# Copyright (c) 2018 Jonathan DEKHTIAR, contact@jonathandekhtiar.eu
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

ARG BASE_CONTAINER="cudnn_openmpi"
ARG BASE_CONTAINER_TAG="ubuntu16.04_cuda10.0_cudnn7.4.2_openmpi3.4.1"

FROM born2data/${BASE_CONTAINER}:${BASE_CONTAINER_TAG}

LABEL version="1.0" maintainer="Jonathan DEKHTIAR <contact@jonathandekhtiar.eu>"

ARG BAZEL_VERSION='0.19.2'
ARG TF_REPO='https://github.com/tensorflow/tensorflow.git'
ARG TF_BUILD_BRANCH='r1.12'
ARG HOROVOD_VERSION='0.15.2'

WORKDIR /workspace

ENV DEBIAN_FRONTEND=noninteractive \
    CI_BUILD_PYTHON=python \
    HOROVOD_WITH_TENSORFLOW='1' \
    HOROVOD_WITHOUT_TENSORFLOW=''

RUN bash -c 'echo -e "###############################################################"' && \
    bash -c 'echo -e "   [-] BAZEL_VERSION   = $BAZEL_VERSION"' && \
    bash -c 'echo -e "   [-] TF_REPO         = $TF_REPO"' && \
    bash -c 'echo -e "   [-] TF_BUILD_BRANCH = $TF_BUILD_BRANCH"' && \
    bash -c 'echo -e "   [-] HOROVOD_VERSION = $HOROVOD_VERSION"' && \
    bash -c 'echo -e "###############################################################"'

# Set up Bazel.
# Running bazel inside a `docker build` command causes trouble, cf:
# https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
# Similarly, we need to work around sandboxing issues:
# https://github.com/bazelbuild/bazel/issues/418

RUN rm -f /etc/bazel.bazelrc && \
    echo "startup --batch" >> /etc/bazel.bazelrc && \
    echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
            >> /etc/bazel.bazelrc && \
    rm -rf /bazel &&    mkdir /bazel && cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" \
            -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" \
            -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Configure the build for our CUDA configuration.

# ======== CUDA Compute Capabilities ========
#
#    [*] GTX Titan X: 5.2
#    [*] Quadro GP100: 6.0
#    [*] GTX 1080 (Ti): 6.1
#    [*] NVIDIA Titan X/Xp: 6.1
#    [*] NVIDIA Titan V: 7.0
#    [*] Tesla GV100: 7.0
#    [*] RTX 2080 (Ti): 7.5
#
# ======== CUDA Compute Capabilities ========

ENV LD_LIBRARY_PATH="/usr/local/lib:/usr/lib/x86_64-linux-gnu:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/usr/local/cuda/extras/CUPTI/lib64" \
    BLAS_INCLUDE='/usr/local/cuda/targets/x86_64-linux/include' \
    BLAS_LIB='/usr/local/cuda/targets/x86_64-linux/lib' \
    CPLUS_INCLUDE_PATH='/usr/local/cuda/$CPLUS_INCLUDE_PATH' \
    CUDA_TOOLKIT_PATH="/usr/local/cuda" \
    GCC_HOST_COMPILER_PATH="/usr/bin/gcc" \
    TF_CUDA_CLANG=0 \
    TF_CUDA_COMPUTE_CAPABILITIES=5.2,6.0,6.1,7.0,7.5 \
    TF_CUDA_VERSION=10.0 \
    TF_CUDNN_VERSION=7 \
    TF_NCCL_VERSION=2 \
    TF_ENABLE_XLA=1 \
    TF_NEED_CUDA=1 \
    TF_NEED_JEMALLOC=1 \
    TF_NEED_HDFS=1 \
    TF_NEED_MPI=1 \
    TF_NEED_VERBS=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_GDR=0 \
    TF_NEED_GCP=0 \
    TF_NEED_S3=0 \
    TF_NEED_TENSORRT=0

# Get the TF branch for later build
RUN rm -rf /opt/tensorflow && \
    git clone --branch=$TF_BUILD_BRANCH --depth=1 $TF_REPO /opt/tensorflow && \
    cd /opt/tensorflow && \
    rm -f /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    echo "/usr/local/cuda/lib64" > /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/cuda/targets/x86_64-linux/lib/stubs" > /etc/ld.so.conf.d/cuda-10.0-stubs.conf && \
    bazel clean && \
    ldconfig && \
    tensorflow/tools/ci_build/builds/configured GPU \
    bazel build -c opt --copt=-mavx --config=cuda \
        --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        --action_env=LD_LIBRARY_PATH=${LD_LIBRARY_PATH} \
        tensorflow/tools/pip_package:build_pip_package && \
    mkdir /opt/tensorflow/pip_pkg && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /opt/tensorflow/pip_pkg --gpu && \
    pip --no-cache-dir install --upgrade /opt/tensorflow/pip_pkg/tensorflow_*.whl && \
    rm -f /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    rm -rf /root/.cache

# RUN rm -rf opt/tensorflow/pip_pkg

# Install Horovod, temporarily using CUDA stubs
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    pip install --no-cache-dir --no-cache horovod==${HOROVOD_VERSION} && \
    ldconfig
